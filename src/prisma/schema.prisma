// This is your Prisma schema file for chat functionality
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  firebaseUid     String @unique  // Store Firebase UID for reference
  name            String?
  email           String? @unique
  profileImageUrl String?  // Profile photo URL from Firebase

  // Chat-related fields
  conversationIds String[] @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  seenMessageIds  String[] @db.ObjectId
  seenMessages    Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  messages        Message[]
  
  // Connection reference to Firebase connections
  connections     Connection[]
}

model Connection {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  firebaseConnectionId String? @unique  // ID from Firebase connection document
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  connectedUserId   String  // Firebase UID of the connected user
  createdAt         DateTime @default(now())
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  isGroup       Boolean   @default(false)
  name          String?   // Only used for group conversations
  
  messagesIds   String[]  @db.ObjectId
  messages      Message[]
  userIds       String[]  @db.ObjectId
  users         User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createdAt      DateTime     @default(now())
  seenIds        String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}